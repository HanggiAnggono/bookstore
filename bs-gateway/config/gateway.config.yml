http:
  port: 8080
admin:
  port: 9876
  host: localhost
apiEndpoints:
  auth:
    host: '*'
    paths: '/api/auth/*'
  api:
    host: '*'
    paths: '/api/*'
serviceEndpoints:
  bs_api_svc:
    url: ${BOOKSTORE_API_PORT:-'http://localhost:5001'}
  bs_inventory_svc:
    url: ${BOOKSTORE_INVENTORY_PORT:-'http://localhost:5002'}
  bs_auth_svc:
    url: ${BS_AUTH_PORT:-'http://localhost:5003'}
  bs_order_svc:
    url: ${BS_ORDER_PORT:-'http://localhost:5004'}
policies:
  - basic-auth
  - cors
  - expression
  - key-auth
  - log
  - oauth2
  - proxy
  - rate-limit
  - jwt
pipelines:
  auth_pipeline:
    apiEndpoints:
      - auth
    policies:
      - proxy:
          - condition:
              name: pathMatch
              pattern: '/api/auth/*'
            action:
              serviceEndpoint: bs_auth_svc
  default:
    apiEndpoints:
      - api
    policies:
      - log:
          action:
            message: 'api ${req.method} ${req.path}'
      - jwt:
          - action:
              secretOrPublicKey: ${JWT_SECRET}
              checkCredentialExistence: false
      - proxy:
          - condition:
              name: pathMatch
              pattern: '/api/books/*'
            action:
              serviceEndpoint: bs_api_svc
          - condition:
              name: pathMatch
              pattern: '/api/inventory/*'
            action:
              serviceEndpoint: bs_inventory_svc
          - condition:
              name: pathMatch
              pattern: '/api/orders/*'
            action:
              serviceEndpoint: bs_order_svc
